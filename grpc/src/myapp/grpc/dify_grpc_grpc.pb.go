// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: grpc/dify_grpc.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DifyGrpcServiceClient is the client API for DifyGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DifyGrpcServiceClient interface {
	SendQuestion(ctx context.Context, in *DifyRequest, opts ...grpc.CallOption) (DifyGrpcService_SendQuestionClient, error)
}

type difyGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDifyGrpcServiceClient(cc grpc.ClientConnInterface) DifyGrpcServiceClient {
	return &difyGrpcServiceClient{cc}
}

func (c *difyGrpcServiceClient) SendQuestion(ctx context.Context, in *DifyRequest, opts ...grpc.CallOption) (DifyGrpcService_SendQuestionClient, error) {
	stream, err := c.cc.NewStream(ctx, &DifyGrpcService_ServiceDesc.Streams[0], "/dify_grpc.DifyGrpcService/SendQuestion", opts...)
	if err != nil {
		return nil, err
	}
	x := &difyGrpcServiceSendQuestionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DifyGrpcService_SendQuestionClient interface {
	Recv() (*DifyResponse, error)
	grpc.ClientStream
}

type difyGrpcServiceSendQuestionClient struct {
	grpc.ClientStream
}

func (x *difyGrpcServiceSendQuestionClient) Recv() (*DifyResponse, error) {
	m := new(DifyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DifyGrpcServiceServer is the server API for DifyGrpcService service.
// All implementations must embed UnimplementedDifyGrpcServiceServer
// for forward compatibility
type DifyGrpcServiceServer interface {
	SendQuestion(*DifyRequest, DifyGrpcService_SendQuestionServer) error
	mustEmbedUnimplementedDifyGrpcServiceServer()
}

// UnimplementedDifyGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDifyGrpcServiceServer struct {
}

func (UnimplementedDifyGrpcServiceServer) SendQuestion(*DifyRequest, DifyGrpcService_SendQuestionServer) error {
	return status.Errorf(codes.Unimplemented, "method SendQuestion not implemented")
}
func (UnimplementedDifyGrpcServiceServer) mustEmbedUnimplementedDifyGrpcServiceServer() {}

// UnsafeDifyGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DifyGrpcServiceServer will
// result in compilation errors.
type UnsafeDifyGrpcServiceServer interface {
	mustEmbedUnimplementedDifyGrpcServiceServer()
}

func RegisterDifyGrpcServiceServer(s grpc.ServiceRegistrar, srv DifyGrpcServiceServer) {
	s.RegisterService(&DifyGrpcService_ServiceDesc, srv)
}

func _DifyGrpcService_SendQuestion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DifyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DifyGrpcServiceServer).SendQuestion(m, &difyGrpcServiceSendQuestionServer{stream})
}

type DifyGrpcService_SendQuestionServer interface {
	Send(*DifyResponse) error
	grpc.ServerStream
}

type difyGrpcServiceSendQuestionServer struct {
	grpc.ServerStream
}

func (x *difyGrpcServiceSendQuestionServer) Send(m *DifyResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DifyGrpcService_ServiceDesc is the grpc.ServiceDesc for DifyGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DifyGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dify_grpc.DifyGrpcService",
	HandlerType: (*DifyGrpcServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendQuestion",
			Handler:       _DifyGrpcService_SendQuestion_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/dify_grpc.proto",
}
