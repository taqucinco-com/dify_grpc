// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: grpc/dify_grpc.proto

package dify_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DifyGrpcServiceClient is the client API for DifyGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DifyGrpcServiceClient interface {
	SendMessage(ctx context.Context, in *DifyRequest, opts ...grpc.CallOption) (*DifyResponse, error)
}

type difyGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDifyGrpcServiceClient(cc grpc.ClientConnInterface) DifyGrpcServiceClient {
	return &difyGrpcServiceClient{cc}
}

func (c *difyGrpcServiceClient) SendMessage(ctx context.Context, in *DifyRequest, opts ...grpc.CallOption) (*DifyResponse, error) {
	out := new(DifyResponse)
	err := c.cc.Invoke(ctx, "/dify_grpc.DifyGrpcService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DifyGrpcServiceServer is the server API for DifyGrpcService service.
// All implementations must embed UnimplementedDifyGrpcServiceServer
// for forward compatibility
type DifyGrpcServiceServer interface {
	SendMessage(context.Context, *DifyRequest) (*DifyResponse, error)
	mustEmbedUnimplementedDifyGrpcServiceServer()
}

// UnimplementedDifyGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDifyGrpcServiceServer struct {
}

func (UnimplementedDifyGrpcServiceServer) SendMessage(context.Context, *DifyRequest) (*DifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedDifyGrpcServiceServer) mustEmbedUnimplementedDifyGrpcServiceServer() {}

// UnsafeDifyGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DifyGrpcServiceServer will
// result in compilation errors.
type UnsafeDifyGrpcServiceServer interface {
	mustEmbedUnimplementedDifyGrpcServiceServer()
}

func RegisterDifyGrpcServiceServer(s grpc.ServiceRegistrar, srv DifyGrpcServiceServer) {
	s.RegisterService(&DifyGrpcService_ServiceDesc, srv)
}

func _DifyGrpcService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DifyGrpcServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dify_grpc.DifyGrpcService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DifyGrpcServiceServer).SendMessage(ctx, req.(*DifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DifyGrpcService_ServiceDesc is the grpc.ServiceDesc for DifyGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DifyGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dify_grpc.DifyGrpcService",
	HandlerType: (*DifyGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _DifyGrpcService_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/dify_grpc.proto",
}
